// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:head.001.001.01
package head_001_001_01

import (
	"github.com/moov-io/base"
	"github.com/moov-io/fedwire20022/pkg/fedwire"
)

// XSD Element validations

func (v AppHdr) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AppHdr"
	if v.CharSet != nil {
		fedwire.AddError(&errs, baseName+".CharSet", v.CharSet.Validate())
	}
	fedwire.AddError(&errs, baseName+".Fr", v.Fr.Validate())
	fedwire.AddError(&errs, baseName+".To", v.To.Validate())
	fedwire.AddError(&errs, baseName+".BizMsgIdr", v.BizMsgIdr.Validate())
	fedwire.AddError(&errs, baseName+".MsgDefIdr", v.MsgDefIdr.Validate())
	if v.BizSvc != nil {
		fedwire.AddError(&errs, baseName+".BizSvc", v.BizSvc.Validate())
	}
	fedwire.AddError(&errs, baseName+".CreDt", v.CreDt.Validate())
	if v.CpyDplct != nil {
		fedwire.AddError(&errs, baseName+".CpyDplct", v.CpyDplct.Validate())
	}
	if v.PssblDplct != nil {
		fedwire.AddError(&errs, baseName+".PssblDplct", v.PssblDplct.Validate())
	}
	if v.Prty != nil {
		fedwire.AddError(&errs, baseName+".Prty", v.Prty.Validate())
	}
	if v.Sgntr != nil {
	}
	if v.Rltd != nil {
		fedwire.AddError(&errs, baseName+".Rltd", v.Rltd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD ComplexType validations

func (v BranchAndFinancialInstitutionIdentification5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification5"
	fedwire.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if v.BrnchId != nil {
		fedwire.AddError(&errs, baseName+".BrnchId", v.BrnchId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchData2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchData2"
	if v.Id != nil {
		fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	}
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PstlAdr != nil {
		fedwire.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BusinessApplicationHeader1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BusinessApplicationHeader1"
	if v.CharSet != nil {
		fedwire.AddError(&errs, baseName+".CharSet", v.CharSet.Validate())
	}
	fedwire.AddError(&errs, baseName+".Fr", v.Fr.Validate())
	fedwire.AddError(&errs, baseName+".To", v.To.Validate())
	fedwire.AddError(&errs, baseName+".BizMsgIdr", v.BizMsgIdr.Validate())
	fedwire.AddError(&errs, baseName+".MsgDefIdr", v.MsgDefIdr.Validate())
	if v.BizSvc != nil {
		fedwire.AddError(&errs, baseName+".BizSvc", v.BizSvc.Validate())
	}
	fedwire.AddError(&errs, baseName+".CreDt", v.CreDt.Validate())
	if v.CpyDplct != nil {
		fedwire.AddError(&errs, baseName+".CpyDplct", v.CpyDplct.Validate())
	}
	if v.PssblDplct != nil {
		fedwire.AddError(&errs, baseName+".PssblDplct", v.PssblDplct.Validate())
	}
	if v.Prty != nil {
		fedwire.AddError(&errs, baseName+".Prty", v.Prty.Validate())
	}
	if v.Sgntr != nil {
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BusinessApplicationHeaderV01) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BusinessApplicationHeaderV01"
	if v.CharSet != nil {
		fedwire.AddError(&errs, baseName+".CharSet", v.CharSet.Validate())
	}
	fedwire.AddError(&errs, baseName+".Fr", v.Fr.Validate())
	fedwire.AddError(&errs, baseName+".To", v.To.Validate())
	fedwire.AddError(&errs, baseName+".BizMsgIdr", v.BizMsgIdr.Validate())
	fedwire.AddError(&errs, baseName+".MsgDefIdr", v.MsgDefIdr.Validate())
	if v.BizSvc != nil {
		fedwire.AddError(&errs, baseName+".BizSvc", v.BizSvc.Validate())
	}
	fedwire.AddError(&errs, baseName+".CreDt", v.CreDt.Validate())
	if v.CpyDplct != nil {
		fedwire.AddError(&errs, baseName+".CpyDplct", v.CpyDplct.Validate())
	}
	if v.PssblDplct != nil {
		fedwire.AddError(&errs, baseName+".PssblDplct", v.PssblDplct.Validate())
	}
	if v.Prty != nil {
		fedwire.AddError(&errs, baseName+".Prty", v.Prty.Validate())
	}
	if v.Sgntr != nil {
	}
	if v.Rltd != nil {
		fedwire.AddError(&errs, baseName+".Rltd", v.Rltd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemIdentification2Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemIdentification2Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification2"
	if v.ClrSysId != nil {
		fedwire.AddError(&errs, baseName+".ClrSysId", v.ClrSysId.Validate())
	}
	fedwire.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ContactDetails2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ContactDetails2"
	if v.NmPrfx != nil {
		fedwire.AddError(&errs, baseName+".NmPrfx", v.NmPrfx.Validate())
	}
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PhneNb != nil {
		fedwire.AddError(&errs, baseName+".PhneNb", v.PhneNb.Validate())
	}
	if v.MobNb != nil {
		fedwire.AddError(&errs, baseName+".MobNb", v.MobNb.Validate())
	}
	if v.FaxNb != nil {
		fedwire.AddError(&errs, baseName+".FaxNb", v.FaxNb.Validate())
	}
	if v.EmailAdr != nil {
		fedwire.AddError(&errs, baseName+".EmailAdr", v.EmailAdr.Validate())
	}
	if v.Othr != nil {
		fedwire.AddError(&errs, baseName+".Othr", v.Othr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DateAndPlaceOfBirth) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DateAndPlaceOfBirth"
	fedwire.AddError(&errs, baseName+".BirthDt", v.BirthDt.Validate())
	if v.PrvcOfBirth != nil {
		fedwire.AddError(&errs, baseName+".PrvcOfBirth", v.PrvcOfBirth.Validate())
	}
	fedwire.AddError(&errs, baseName+".CityOfBirth", v.CityOfBirth.Validate())
	fedwire.AddError(&errs, baseName+".CtryOfBirth", v.CtryOfBirth.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialIdentificationSchemeName1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialIdentificationSchemeName1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification8) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification8"
	if v.BICFI != nil {
		fedwire.AddError(&errs, baseName+".BICFI", v.BICFI.Validate())
	}
	if v.ClrSysMmbId != nil {
		fedwire.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	}
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PstlAdr != nil {
		fedwire.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	}
	if v.Othr != nil {
		fedwire.AddError(&errs, baseName+".Othr", v.Othr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericFinancialIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericFinancialIdentification1"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.SchmeNm != nil {
		fedwire.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericOrganisationIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericOrganisationIdentification1"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.SchmeNm != nil {
		fedwire.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericPersonIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericPersonIdentification1"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.SchmeNm != nil {
		fedwire.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OrganisationIdentification7) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OrganisationIdentification7"
	if v.AnyBIC != nil {
		fedwire.AddError(&errs, baseName+".AnyBIC", v.AnyBIC.Validate())
	}
	if v.Othr != nil {
		for indx := range v.Othr {
			fedwire.AddError(&errs, baseName+".Othr", v.Othr[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OrganisationIdentificationSchemeName1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OrganisationIdentificationSchemeName1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party10Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Party10Choice"
	if v.OrgId != nil {
		fedwire.AddError(&errs, baseName+".OrgId", v.OrgId.Validate())
	}
	if v.PrvtId != nil {
		fedwire.AddError(&errs, baseName+".PrvtId", v.PrvtId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party9Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Party9Choice"
	if v.OrgId != nil {
		fedwire.AddError(&errs, baseName+".OrgId", v.OrgId.Validate())
	}
	if v.FIId != nil {
		fedwire.AddError(&errs, baseName+".FIId", v.FIId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PartyIdentification42) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PartyIdentification42"
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PstlAdr != nil {
		fedwire.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	}
	if v.Id != nil {
		fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	}
	if v.CtryOfRes != nil {
		fedwire.AddError(&errs, baseName+".CtryOfRes", v.CtryOfRes.Validate())
	}
	if v.CtctDtls != nil {
		fedwire.AddError(&errs, baseName+".CtctDtls", v.CtctDtls.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PersonIdentification5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PersonIdentification5"
	if v.DtAndPlcOfBirth != nil {
		fedwire.AddError(&errs, baseName+".DtAndPlcOfBirth", v.DtAndPlcOfBirth.Validate())
	}
	if v.Othr != nil {
		for indx := range v.Othr {
			fedwire.AddError(&errs, baseName+".Othr", v.Othr[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PersonIdentificationSchemeName1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PersonIdentificationSchemeName1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PostalAddress6) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PostalAddress6"
	if v.AdrTp != nil {
		fedwire.AddError(&errs, baseName+".AdrTp", v.AdrTp.Validate())
	}
	if v.Dept != nil {
		fedwire.AddError(&errs, baseName+".Dept", v.Dept.Validate())
	}
	if v.SubDept != nil {
		fedwire.AddError(&errs, baseName+".SubDept", v.SubDept.Validate())
	}
	if v.StrtNm != nil {
		fedwire.AddError(&errs, baseName+".StrtNm", v.StrtNm.Validate())
	}
	if v.BldgNb != nil {
		fedwire.AddError(&errs, baseName+".BldgNb", v.BldgNb.Validate())
	}
	if v.PstCd != nil {
		fedwire.AddError(&errs, baseName+".PstCd", v.PstCd.Validate())
	}
	if v.TwnNm != nil {
		fedwire.AddError(&errs, baseName+".TwnNm", v.TwnNm.Validate())
	}
	if v.CtrySubDvsn != nil {
		fedwire.AddError(&errs, baseName+".CtrySubDvsn", v.CtrySubDvsn.Validate())
	}
	if v.Ctry != nil {
		fedwire.AddError(&errs, baseName+".Ctry", v.Ctry.Validate())
	}
	if v.AdrLine != nil {
		for indx := range v.AdrLine {
			fedwire.AddError(&errs, baseName+".AdrLine", v.AdrLine[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v AddressType2Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "ADDR", "PBOX", "HOME", "BIZZ", "MLTO", "DLVY"); err != nil {
		return err
	}
	return nil
}

func (v AnyBICIdentifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}`); err != nil {
		return err
	}
	return nil
}

func (v BICFIIdentifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}`); err != nil {
		return err
	}
	return nil
}

func (v BusinessMessagePriorityCode) Validate() error {
	return nil
}

func (v CopyDuplicate1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "CODU", "COPY", "DUPL"); err != nil {
		return err
	}
	return nil
}

func (v CountryCode) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{2,2}`); err != nil {
		return err
	}
	return nil
}

func (v ExternalClearingSystemIdentification1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 5); err != nil {
		return err
	}
	return nil
}

func (v ExternalFinancialInstitutionIdentification1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalOrganisationIdentification1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalPersonIdentification1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v Max140Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 140); err != nil {
		return err
	}
	return nil
}

func (v Max16Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 16); err != nil {
		return err
	}
	return nil
}

func (v Max2048Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 2048); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max70Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 70); err != nil {
		return err
	}
	return nil
}

func (v NamePrefix1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "DOCT", "MIST", "MISS", "MADM"); err != nil {
		return err
	}
	return nil
}

func (v PhoneNumber) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `\+[0-9]{1,3}-[0-9()+\-]{1,30}`); err != nil {
		return err
	}
	return nil
}

func (v UnicodeChartsCode) Validate() error {
	return nil
}

func (v YesNoIndicator) Validate() error {
	return nil
}
