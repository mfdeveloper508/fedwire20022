// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:camt.052.001.08
package EndpointGapReport_camt_052_001_08

import (
	"github.com/moov-io/base"
	"github.com/moov-io/fedwire20022/pkg/fedwire"
)

// XSD Element validations

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	fedwire.AddError(&errs, baseName+".BkToCstmrAcctRpt", v.BkToCstmrAcctRpt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD ComplexType validations

func (v AccountIdentification4Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AccountIdentification4Choice1"
	if v.Othr != nil {
		fedwire.AddError(&errs, baseName+".Othr", v.Othr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AccountReport251) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AccountReport251"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	fedwire.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	fedwire.AddError(&errs, baseName+".Acct", v.Acct.Validate())
	fedwire.AddError(&errs, baseName+".AddtlRptInf", v.AddtlRptInf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BankToCustomerAccountReportV08) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BankToCustomerAccountReportV08"
	fedwire.AddError(&errs, baseName+".GrpHdr", v.GrpHdr.Validate())
	for indx := range v.Rpt {
		fedwire.AddError(&errs, baseName+".Rpt", v.Rpt[indx].Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashAccount391) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashAccount391"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericAccountIdentification11) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericAccountIdentification11"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GroupHeader811) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GroupHeader811"
	fedwire.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	fedwire.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	fedwire.AddError(&errs, baseName+".MsgPgntn", v.MsgPgntn.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Pagination1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Pagination1"
	fedwire.AddError(&errs, baseName+".PgNb", v.PgNb.Validate())
	fedwire.AddError(&errs, baseName+".LastPgInd", v.LastPgInd.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v AccountReportingFedwireFunds1) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "GAPR"); err != nil {
		return err
	}
	return nil
}

func (v EndpointIdentifierFedwireFunds1) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z0-9]{8,8}`); err != nil {
		return err
	}
	if err := fedwire.ValidateMinLength(string(v), 8); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 8); err != nil {
		return err
	}
	return nil
}

func (v GapTypeFedwireFunds1) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "OMAD", "IMAD"); err != nil {
		return err
	}
	return nil
}

func (v Max500Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 500); err != nil {
		return err
	}
	return nil
}

func (v Max5NumericText) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[0-9]{1,5}`); err != nil {
		return err
	}
	return nil
}

func (v YesNoIndicator) Validate() error {
	return nil
}
