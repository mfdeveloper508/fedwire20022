// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:pain.013.001.07
package DrawdownRequest_pain_013_001_07

import (
	"fmt"

	"github.com/moov-io/base"
	"github.com/moov-io/fedwire20022/pkg/fedwire"
)

// XSD Element validations

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	fedwire.AddError(&errs, baseName+".CdtrPmtActvtnReq", v.CdtrPmtActvtnReq.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD ComplexType validations

func (v AccountIdentification4Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AccountIdentification4Choice"
	if v.IBAN != nil {
		fedwire.AddError(&errs, baseName+".IBAN", v.IBAN.Validate())
	}
	if v.Othr != nil {
		fedwire.AddError(&errs, baseName+".Othr", v.Othr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AccountSchemeName1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AccountSchemeName1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ActiveCurrencyAndAmountFedwire1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ActiveCurrencyAndAmountFedwire1"

	fedwire.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())

	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ActiveOrHistoricCurrencyAndAmount) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ActiveOrHistoricCurrencyAndAmount"

	fedwire.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())

	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AmountType4Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AmountType4Choice1"
	if v.InstdAmt != nil {
		fedwire.AddError(&errs, baseName+".InstdAmt", v.InstdAmt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification61) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification61"
	fedwire.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashAccount38) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashAccount38"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Ccy != nil {
		fedwire.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())
	}
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.Prxy != nil {
		fedwire.AddError(&errs, baseName+".Prxy", v.Prxy.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashAccountType2Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashAccountType2Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CategoryPurpose1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CategoryPurpose1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemIdentification2Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemIdentification2Choice1"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification21) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification21"
	fedwire.AddError(&errs, baseName+".ClrSysId", v.ClrSysId.Validate())
	fedwire.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditTransferTransaction351) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditTransferTransaction351"
	fedwire.AddError(&errs, baseName+".PmtId", v.PmtId.Validate())
	fedwire.AddError(&errs, baseName+".PmtTpInf", v.PmtTpInf.Validate())
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	fedwire.AddError(&errs, baseName+".ChrgBr", v.ChrgBr.Validate())
	if v.UltmtDbtr != nil {
		fedwire.AddError(&errs, baseName+".UltmtDbtr", v.UltmtDbtr.Validate())
	}
	fedwire.AddError(&errs, baseName+".CdtrAgt", v.CdtrAgt.Validate())
	fedwire.AddError(&errs, baseName+".Cdtr", v.Cdtr.Validate())
	if v.CdtrAcct != nil {
		fedwire.AddError(&errs, baseName+".CdtrAcct", v.CdtrAcct.Validate())
	}
	if v.UltmtCdtr != nil {
		fedwire.AddError(&errs, baseName+".UltmtCdtr", v.UltmtCdtr.Validate())
	}
	if v.Purp != nil {
		fedwire.AddError(&errs, baseName+".Purp", v.Purp.Validate())
	}
	if v.RltdRmtInf != nil {
		fedwire.AddError(&errs, baseName+".RltdRmtInf", v.RltdRmtInf.Validate())
	}
	if v.RmtInf != nil {
		fedwire.AddError(&errs, baseName+".RmtInf", v.RmtInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditorPaymentActivationRequestV07) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditorPaymentActivationRequestV07"
	fedwire.AddError(&errs, baseName+".GrpHdr", v.GrpHdr.Validate())
	fedwire.AddError(&errs, baseName+".PmtInf", v.PmtInf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditorReferenceInformation2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditorReferenceInformation2"
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Ref != nil {
		fedwire.AddError(&errs, baseName+".Ref", v.Ref.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditorReferenceType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditorReferenceType1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditorReferenceType2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditorReferenceType2"
	fedwire.AddError(&errs, baseName+".CdOrPrtry", v.CdOrPrtry.Validate())
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DateAndDateTime2Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DateAndDateTime2Choice1"
	if v.Dt != nil {
		fedwire.AddError(&errs, baseName+".Dt", v.Dt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DateAndPlaceOfBirth1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DateAndPlaceOfBirth1"
	fedwire.AddError(&errs, baseName+".BirthDt", v.BirthDt.Validate())
	if v.PrvcOfBirth != nil {
		fedwire.AddError(&errs, baseName+".PrvcOfBirth", v.PrvcOfBirth.Validate())
	}
	fedwire.AddError(&errs, baseName+".CityOfBirth", v.CityOfBirth.Validate())
	fedwire.AddError(&errs, baseName+".CtryOfBirth", v.CtryOfBirth.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DatePeriod2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DatePeriod2"
	fedwire.AddError(&errs, baseName+".FrDt", v.FrDt.Validate())
	fedwire.AddError(&errs, baseName+".ToDt", v.ToDt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DiscountAmountAndType1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DiscountAmountAndType1"
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DiscountAmountType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DiscountAmountType1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentAdjustment1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DocumentAdjustment1"
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if v.CdtDbtInd != nil {
		fedwire.AddError(&errs, baseName+".CdtDbtInd", v.CdtDbtInd.Validate())
	}
	if v.Rsn != nil {
		fedwire.AddError(&errs, baseName+".Rsn", v.Rsn.Validate())
	}
	if v.AddtlInf != nil {
		fedwire.AddError(&errs, baseName+".AddtlInf", v.AddtlInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentLineIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DocumentLineIdentification1"
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Nb != nil {
		fedwire.AddError(&errs, baseName+".Nb", v.Nb.Validate())
	}
	if v.RltdDt != nil {
		fedwire.AddError(&errs, baseName+".RltdDt", v.RltdDt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentLineInformation11) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DocumentLineInformation11"
	for indx := range v.Id {
		fedwire.AddError(&errs, baseName+".Id", v.Id[indx].Validate())
	}
	if v.Desc != nil {
		fedwire.AddError(&errs, baseName+".Desc", v.Desc.Validate())
	}
	if v.Amt != nil {
		fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentLineType1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DocumentLineType1"
	fedwire.AddError(&errs, baseName+".CdOrPrtry", v.CdOrPrtry.Validate())
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentLineType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DocumentLineType1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification181) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification181"
	fedwire.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Garnishment31) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Garnishment31"
	fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	if v.Grnshee != nil {
		fedwire.AddError(&errs, baseName+".Grnshee", v.Grnshee.Validate())
	}
	if v.GrnshmtAdmstr != nil {
		fedwire.AddError(&errs, baseName+".GrnshmtAdmstr", v.GrnshmtAdmstr.Validate())
	}
	if v.RefNb != nil {
		fedwire.AddError(&errs, baseName+".RefNb", v.RefNb.Validate())
	}
	if v.Dt != nil {
		fedwire.AddError(&errs, baseName+".Dt", v.Dt.Validate())
	}
	if v.RmtdAmt != nil {
		fedwire.AddError(&errs, baseName+".RmtdAmt", v.RmtdAmt.Validate())
	}
	if v.FmlyMdclInsrncInd != nil {
		fedwire.AddError(&errs, baseName+".FmlyMdclInsrncInd", v.FmlyMdclInsrncInd.Validate())
	}
	if v.MplyeeTermntnInd != nil {
		fedwire.AddError(&errs, baseName+".MplyeeTermntnInd", v.MplyeeTermntnInd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GarnishmentType1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GarnishmentType1"
	fedwire.AddError(&errs, baseName+".CdOrPrtry", v.CdOrPrtry.Validate())
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GarnishmentType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GarnishmentType1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericAccountIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericAccountIdentification1"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.SchmeNm != nil {
		fedwire.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericOrganisationIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericOrganisationIdentification1"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.SchmeNm != nil {
		fedwire.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericPersonIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericPersonIdentification1"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.SchmeNm != nil {
		fedwire.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GroupHeader781) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GroupHeader781"
	fedwire.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	fedwire.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	fedwire.AddError(&errs, baseName+".NbOfTxs", v.NbOfTxs.Validate())
	fedwire.AddError(&errs, baseName+".InitgPty", v.InitgPty.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v LocalInstrument2Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "LocalInstrument2Choice1"
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v NameAndAddress161) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "NameAndAddress161"
	fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	fedwire.AddError(&errs, baseName+".Adr", v.Adr.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OrganisationIdentification291) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OrganisationIdentification291"
	if v.AnyBIC != nil {
		fedwire.AddError(&errs, baseName+".AnyBIC", v.AnyBIC.Validate())
	}
	if v.LEI != nil {
		fedwire.AddError(&errs, baseName+".LEI", v.LEI.Validate())
	}
	if v.Othr != nil {
		for indx := range v.Othr {
			fedwire.AddError(&errs, baseName+".Othr", v.Othr[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OrganisationIdentificationSchemeName1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OrganisationIdentificationSchemeName1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party38Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Party38Choice1"
	if v.OrgId != nil {
		fedwire.AddError(&errs, baseName+".OrgId", v.OrgId.Validate())
	}
	if v.PrvtId != nil {
		fedwire.AddError(&errs, baseName+".PrvtId", v.PrvtId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PartyIdentification1351) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PartyIdentification1351"
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PstlAdr != nil {
		fedwire.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	}
	if v.Id != nil {
		fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	}
	if v.CtryOfRes != nil {
		fedwire.AddError(&errs, baseName+".CtryOfRes", v.CtryOfRes.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PartyIdentification1352) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PartyIdentification1352"
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PstlAdr != nil {
		fedwire.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	}
	if v.Id != nil {
		fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	}
	if v.CtryOfRes != nil {
		fedwire.AddError(&errs, baseName+".CtryOfRes", v.CtryOfRes.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentIdentification61) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PaymentIdentification61"
	if v.InstrId != nil {
		fedwire.AddError(&errs, baseName+".InstrId", v.InstrId.Validate())
	}
	fedwire.AddError(&errs, baseName+".EndToEndId", v.EndToEndId.Validate())
	fedwire.AddError(&errs, baseName+".UETR", v.UETR.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentInstruction311) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PaymentInstruction311"
	fedwire.AddError(&errs, baseName+".PmtInfId", v.PmtInfId.Validate())
	fedwire.AddError(&errs, baseName+".PmtMtd", v.PmtMtd.Validate())
	fedwire.AddError(&errs, baseName+".ReqdExctnDt", v.ReqdExctnDt.Validate())
	fedwire.AddError(&errs, baseName+".Dbtr", v.Dbtr.Validate())
	if v.DbtrAcct != nil {
		fedwire.AddError(&errs, baseName+".DbtrAcct", v.DbtrAcct.Validate())
	}
	fedwire.AddError(&errs, baseName+".DbtrAgt", v.DbtrAgt.Validate())
	fedwire.AddError(&errs, baseName+".CdtTrfTx", v.CdtTrfTx.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentTypeInformation261) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PaymentTypeInformation261"
	if v.InstrPrty != nil {
		fedwire.AddError(&errs, baseName+".InstrPrty", v.InstrPrty.Validate())
	}
	if v.SvcLvl != nil {
		for indx := range v.SvcLvl {
			fedwire.AddError(&errs, baseName+".SvcLvl", v.SvcLvl[indx].Validate())
		}
	}
	fedwire.AddError(&errs, baseName+".LclInstrm", v.LclInstrm.Validate())
	if v.CtgyPurp != nil {
		fedwire.AddError(&errs, baseName+".CtgyPurp", v.CtgyPurp.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PersonIdentification131) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PersonIdentification131"
	if v.DtAndPlcOfBirth != nil {
		fedwire.AddError(&errs, baseName+".DtAndPlcOfBirth", v.DtAndPlcOfBirth.Validate())
	}
	if v.Othr != nil {
		for indx := range v.Othr {
			fedwire.AddError(&errs, baseName+".Othr", v.Othr[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PersonIdentificationSchemeName1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PersonIdentificationSchemeName1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PostalAddress241) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PostalAddress241"
	if v.Dept != nil {
		fedwire.AddError(&errs, baseName+".Dept", v.Dept.Validate())
	}
	if v.SubDept != nil {
		fedwire.AddError(&errs, baseName+".SubDept", v.SubDept.Validate())
	}
	if v.StrtNm != nil {
		fedwire.AddError(&errs, baseName+".StrtNm", v.StrtNm.Validate())
	}
	if v.BldgNb != nil {
		fedwire.AddError(&errs, baseName+".BldgNb", v.BldgNb.Validate())
	}
	if v.BldgNm != nil {
		fedwire.AddError(&errs, baseName+".BldgNm", v.BldgNm.Validate())
	}
	if v.Flr != nil {
		fedwire.AddError(&errs, baseName+".Flr", v.Flr.Validate())
	}
	if v.PstBx != nil {
		fedwire.AddError(&errs, baseName+".PstBx", v.PstBx.Validate())
	}
	if v.Room != nil {
		fedwire.AddError(&errs, baseName+".Room", v.Room.Validate())
	}
	if v.PstCd != nil {
		fedwire.AddError(&errs, baseName+".PstCd", v.PstCd.Validate())
	}
	fedwire.AddError(&errs, baseName+".TwnNm", v.TwnNm.Validate())
	if v.TwnLctnNm != nil {
		fedwire.AddError(&errs, baseName+".TwnLctnNm", v.TwnLctnNm.Validate())
	}
	if v.DstrctNm != nil {
		fedwire.AddError(&errs, baseName+".DstrctNm", v.DstrctNm.Validate())
	}
	if v.CtrySubDvsn != nil {
		fedwire.AddError(&errs, baseName+".CtrySubDvsn", v.CtrySubDvsn.Validate())
	}
	fedwire.AddError(&errs, baseName+".Ctry", v.Ctry.Validate())
	if v.AdrLine != nil {
		for indx := range v.AdrLine {
			fedwire.AddError(&errs, baseName+".AdrLine", v.AdrLine[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PostalAddress242) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PostalAddress242"
	if v.Dept != nil {
		fedwire.AddError(&errs, baseName+".Dept", v.Dept.Validate())
	}
	if v.SubDept != nil {
		fedwire.AddError(&errs, baseName+".SubDept", v.SubDept.Validate())
	}
	if v.StrtNm != nil {
		fedwire.AddError(&errs, baseName+".StrtNm", v.StrtNm.Validate())
	}
	if v.BldgNb != nil {
		fedwire.AddError(&errs, baseName+".BldgNb", v.BldgNb.Validate())
	}
	if v.BldgNm != nil {
		fedwire.AddError(&errs, baseName+".BldgNm", v.BldgNm.Validate())
	}
	if v.Flr != nil {
		fedwire.AddError(&errs, baseName+".Flr", v.Flr.Validate())
	}
	if v.PstBx != nil {
		fedwire.AddError(&errs, baseName+".PstBx", v.PstBx.Validate())
	}
	if v.Room != nil {
		fedwire.AddError(&errs, baseName+".Room", v.Room.Validate())
	}
	if v.PstCd != nil {
		fedwire.AddError(&errs, baseName+".PstCd", v.PstCd.Validate())
	}
	if v.TwnNm != nil {
		fedwire.AddError(&errs, baseName+".TwnNm", v.TwnNm.Validate())
	}
	if v.TwnLctnNm != nil {
		fedwire.AddError(&errs, baseName+".TwnLctnNm", v.TwnLctnNm.Validate())
	}
	if v.DstrctNm != nil {
		fedwire.AddError(&errs, baseName+".DstrctNm", v.DstrctNm.Validate())
	}
	if v.CtrySubDvsn != nil {
		fedwire.AddError(&errs, baseName+".CtrySubDvsn", v.CtrySubDvsn.Validate())
	}
	if v.Ctry != nil {
		fedwire.AddError(&errs, baseName+".Ctry", v.Ctry.Validate())
	}
	if v.AdrLine != nil {
		for indx := range v.AdrLine {
			fedwire.AddError(&errs, baseName+".AdrLine", v.AdrLine[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProxyAccountIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProxyAccountIdentification1"
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProxyAccountType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProxyAccountType1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Purpose2Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Purpose2Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReferredDocumentInformation71) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReferredDocumentInformation71"
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Nb != nil {
		fedwire.AddError(&errs, baseName+".Nb", v.Nb.Validate())
	}
	if v.RltdDt != nil {
		fedwire.AddError(&errs, baseName+".RltdDt", v.RltdDt.Validate())
	}
	if v.LineDtls != nil {
		for indx := range v.LineDtls {
			fedwire.AddError(&errs, baseName+".LineDtls", v.LineDtls[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReferredDocumentType3Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReferredDocumentType3Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReferredDocumentType4) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReferredDocumentType4"
	fedwire.AddError(&errs, baseName+".CdOrPrtry", v.CdOrPrtry.Validate())
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceAmount2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceAmount2"
	if v.DuePyblAmt != nil {
		fedwire.AddError(&errs, baseName+".DuePyblAmt", v.DuePyblAmt.Validate())
	}
	if v.DscntApldAmt != nil {
		for indx := range v.DscntApldAmt {
			fedwire.AddError(&errs, baseName+".DscntApldAmt", v.DscntApldAmt[indx].Validate())
		}
	}
	if v.CdtNoteAmt != nil {
		fedwire.AddError(&errs, baseName+".CdtNoteAmt", v.CdtNoteAmt.Validate())
	}
	if v.TaxAmt != nil {
		for indx := range v.TaxAmt {
			fedwire.AddError(&errs, baseName+".TaxAmt", v.TaxAmt[indx].Validate())
		}
	}
	if v.AdjstmntAmtAndRsn != nil {
		for indx := range v.AdjstmntAmtAndRsn {
			fedwire.AddError(&errs, baseName+".AdjstmntAmtAndRsn", v.AdjstmntAmtAndRsn[indx].Validate())
		}
	}
	if v.RmtdAmt != nil {
		fedwire.AddError(&errs, baseName+".RmtdAmt", v.RmtdAmt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceAmount3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceAmount3"
	if v.DuePyblAmt != nil {
		fedwire.AddError(&errs, baseName+".DuePyblAmt", v.DuePyblAmt.Validate())
	}
	if v.DscntApldAmt != nil {
		for indx := range v.DscntApldAmt {
			fedwire.AddError(&errs, baseName+".DscntApldAmt", v.DscntApldAmt[indx].Validate())
		}
	}
	if v.CdtNoteAmt != nil {
		fedwire.AddError(&errs, baseName+".CdtNoteAmt", v.CdtNoteAmt.Validate())
	}
	if v.TaxAmt != nil {
		for indx := range v.TaxAmt {
			fedwire.AddError(&errs, baseName+".TaxAmt", v.TaxAmt[indx].Validate())
		}
	}
	if v.AdjstmntAmtAndRsn != nil {
		for indx := range v.AdjstmntAmtAndRsn {
			fedwire.AddError(&errs, baseName+".AdjstmntAmtAndRsn", v.AdjstmntAmtAndRsn[indx].Validate())
		}
	}
	if v.RmtdAmt != nil {
		fedwire.AddError(&errs, baseName+".RmtdAmt", v.RmtdAmt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceInformation161) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceInformation161"
	if v.Ustrd != nil {
		fedwire.AddError(&errs, baseName+".Ustrd", v.Ustrd.Validate())
	}
	if v.Strd != nil {
		for indx := range v.Strd {
			fedwire.AddError(&errs, baseName+".Strd", v.Strd[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceLocation71) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceLocation71"
	if v.RmtId != nil {
		fedwire.AddError(&errs, baseName+".RmtId", v.RmtId.Validate())
	}
	if v.RmtLctnDtls != nil {
		for indx := range v.RmtLctnDtls {
			fedwire.AddError(&errs, baseName+".RmtLctnDtls", v.RmtLctnDtls[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceLocationData11) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceLocationData11"
	fedwire.AddError(&errs, baseName+".Mtd", v.Mtd.Validate())
	if v.ElctrncAdr != nil {
		fedwire.AddError(&errs, baseName+".ElctrncAdr", v.ElctrncAdr.Validate())
	}
	if v.PstlAdr != nil {
		fedwire.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ServiceLevel8Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ServiceLevel8Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v StructuredRemittanceInformation161) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "StructuredRemittanceInformation161"
	if v.RfrdDocInf != nil {
		for indx := range v.RfrdDocInf {
			fedwire.AddError(&errs, baseName+".RfrdDocInf", v.RfrdDocInf[indx].Validate())
		}
	}
	if v.RfrdDocAmt != nil {
		fedwire.AddError(&errs, baseName+".RfrdDocAmt", v.RfrdDocAmt.Validate())
	}
	if v.CdtrRefInf != nil {
		fedwire.AddError(&errs, baseName+".CdtrRefInf", v.CdtrRefInf.Validate())
	}
	if v.Invcr != nil {
		fedwire.AddError(&errs, baseName+".Invcr", v.Invcr.Validate())
	}
	if v.Invcee != nil {
		fedwire.AddError(&errs, baseName+".Invcee", v.Invcee.Validate())
	}
	if v.TaxRmt != nil {
		fedwire.AddError(&errs, baseName+".TaxRmt", v.TaxRmt.Validate())
	}
	if v.GrnshmtRmt != nil {
		fedwire.AddError(&errs, baseName+".GrnshmtRmt", v.GrnshmtRmt.Validate())
	}
	if v.AddtlRmtInf != nil {
		for indx := range v.AddtlRmtInf {
			fedwire.AddError(&errs, baseName+".AddtlRmtInf", v.AddtlRmtInf[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxAmount2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxAmount2"
	if v.Rate != nil {
		fedwire.AddError(&errs, baseName+".Rate", v.Rate.Validate())
	}
	if v.TaxblBaseAmt != nil {
		fedwire.AddError(&errs, baseName+".TaxblBaseAmt", v.TaxblBaseAmt.Validate())
	}
	if v.TtlAmt != nil {
		fedwire.AddError(&errs, baseName+".TtlAmt", v.TtlAmt.Validate())
	}
	if v.Dtls != nil {
		for indx := range v.Dtls {
			fedwire.AddError(&errs, baseName+".Dtls", v.Dtls[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxAmountAndType1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxAmountAndType1"
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxAmountType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxAmountType1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxAuthorisation1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxAuthorisation1"
	if v.Titl != nil {
		fedwire.AddError(&errs, baseName+".Titl", v.Titl.Validate())
	}
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxInformation7) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxInformation7"
	if v.Cdtr != nil {
		fedwire.AddError(&errs, baseName+".Cdtr", v.Cdtr.Validate())
	}
	if v.Dbtr != nil {
		fedwire.AddError(&errs, baseName+".Dbtr", v.Dbtr.Validate())
	}
	if v.UltmtDbtr != nil {
		fedwire.AddError(&errs, baseName+".UltmtDbtr", v.UltmtDbtr.Validate())
	}
	if v.AdmstnZone != nil {
		fedwire.AddError(&errs, baseName+".AdmstnZone", v.AdmstnZone.Validate())
	}
	if v.RefNb != nil {
		fedwire.AddError(&errs, baseName+".RefNb", v.RefNb.Validate())
	}
	if v.Mtd != nil {
		fedwire.AddError(&errs, baseName+".Mtd", v.Mtd.Validate())
	}
	if v.TtlTaxblBaseAmt != nil {
		fedwire.AddError(&errs, baseName+".TtlTaxblBaseAmt", v.TtlTaxblBaseAmt.Validate())
	}
	if v.TtlTaxAmt != nil {
		fedwire.AddError(&errs, baseName+".TtlTaxAmt", v.TtlTaxAmt.Validate())
	}
	if v.Dt != nil {
		fedwire.AddError(&errs, baseName+".Dt", v.Dt.Validate())
	}
	if v.SeqNb != nil {
		fedwire.AddError(&errs, baseName+".SeqNb", v.SeqNb.Validate())
	}
	if v.Rcrd != nil {
		for indx := range v.Rcrd {
			fedwire.AddError(&errs, baseName+".Rcrd", v.Rcrd[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxParty1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxParty1"
	if v.TaxId != nil {
		fedwire.AddError(&errs, baseName+".TaxId", v.TaxId.Validate())
	}
	if v.RegnId != nil {
		fedwire.AddError(&errs, baseName+".RegnId", v.RegnId.Validate())
	}
	if v.TaxTp != nil {
		fedwire.AddError(&errs, baseName+".TaxTp", v.TaxTp.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxParty2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxParty2"
	if v.TaxId != nil {
		fedwire.AddError(&errs, baseName+".TaxId", v.TaxId.Validate())
	}
	if v.RegnId != nil {
		fedwire.AddError(&errs, baseName+".RegnId", v.RegnId.Validate())
	}
	if v.TaxTp != nil {
		fedwire.AddError(&errs, baseName+".TaxTp", v.TaxTp.Validate())
	}
	if v.Authstn != nil {
		fedwire.AddError(&errs, baseName+".Authstn", v.Authstn.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxPeriod2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxPeriod2"
	if v.Yr != nil {
		fedwire.AddError(&errs, baseName+".Yr", v.Yr.Validate())
	}
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.FrToDt != nil {
		fedwire.AddError(&errs, baseName+".FrToDt", v.FrToDt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxRecord2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxRecord2"
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Ctgy != nil {
		fedwire.AddError(&errs, baseName+".Ctgy", v.Ctgy.Validate())
	}
	if v.CtgyDtls != nil {
		fedwire.AddError(&errs, baseName+".CtgyDtls", v.CtgyDtls.Validate())
	}
	if v.DbtrSts != nil {
		fedwire.AddError(&errs, baseName+".DbtrSts", v.DbtrSts.Validate())
	}
	if v.CertId != nil {
		fedwire.AddError(&errs, baseName+".CertId", v.CertId.Validate())
	}
	if v.FrmsCd != nil {
		fedwire.AddError(&errs, baseName+".FrmsCd", v.FrmsCd.Validate())
	}
	if v.Prd != nil {
		fedwire.AddError(&errs, baseName+".Prd", v.Prd.Validate())
	}
	if v.TaxAmt != nil {
		fedwire.AddError(&errs, baseName+".TaxAmt", v.TaxAmt.Validate())
	}
	if v.AddtlInf != nil {
		fedwire.AddError(&errs, baseName+".AddtlInf", v.AddtlInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxRecordDetails2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxRecordDetails2"
	if v.Prd != nil {
		fedwire.AddError(&errs, baseName+".Prd", v.Prd.Validate())
	}
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v ActiveCurrencyAndAmountFedwire1SimpleType) Validate() error {
	if err := fedwire.ValidateFractionDigits(fmt.Sprintf("%v", v), 2); err != nil {
		return err
	}
	if err := fedwire.ValidateTotalDigits(fmt.Sprintf("%v", v), 14); err != nil {
		return err
	}
	return nil
}

func (v ActiveCurrencyCodeFixed) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "USD"); err != nil {
		return err
	}
	return nil
}

func (v ActiveOrHistoricCurrencyCode) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{3,3}`); err != nil {
		return err
	}
	return nil
}

func (v AnyBICDec2014Identifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}`); err != nil {
		return err
	}
	return nil
}

func (v ChargeBearerType1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "DEBT", "CRED", "SHAR", "SLEV"); err != nil {
		return err
	}
	return nil
}

func (v CountryCode) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{2,2}`); err != nil {
		return err
	}
	return nil
}

func (v CreditDebitCode) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "CRDT", "DBIT"); err != nil {
		return err
	}
	return nil
}

func (v DocumentType3Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "RADM", "RPIN", "FXDR", "DISP", "PUOR", "SCOR"); err != nil {
		return err
	}
	return nil
}

func (v DocumentType6Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "MSIN", "CNFA", "DNFA", "CINV", "CREN", "DEBN", "HIRI", "SBIN", "CMCN", "SOAC", "DISP", "BOLD", "VCHR", "AROI", "TSUT", "PUOR"); err != nil {
		return err
	}
	return nil
}

func (v ExternalAccountIdentification1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalCashAccountType1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalCategoryPurpose1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalClearingSystemIdentification1CodeFixed) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "USABA"); err != nil {
		return err
	}
	return nil
}

func (v ExternalDiscountAmountType1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalDocumentLineType1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalGarnishmentType1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalOrganisationIdentification1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalPersonIdentification1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalProxyAccountType1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalPurpose1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalServiceLevel1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalTaxAmountType1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v IBAN2007Identifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}`); err != nil {
		return err
	}
	return nil
}

func (v IMADFedwireFunds1) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[0-9]{8}[A-Z0-9]{8}[0-9]{6}`); err != nil {
		return err
	}
	if err := fedwire.ValidateMinLength(string(v), 22); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 22); err != nil {
		return err
	}
	return nil
}

func (v LEIIdentifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z0-9]{18,18}[0-9]{2,2}`); err != nil {
		return err
	}
	return nil
}

func (v LocalInstrumentFedwireFunds1) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "DRRC", "DRRB"); err != nil {
		return err
	}
	return nil
}

func (v Max140Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 140); err != nil {
		return err
	}
	return nil
}

func (v Max15NumericTextFixed) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "1"); err != nil {
		return err
	}
	return nil
}

func (v Max16Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 16); err != nil {
		return err
	}
	return nil
}

func (v Max2048Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 2048); err != nil {
		return err
	}
	return nil
}

func (v Max34Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 34); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max4Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v Max70Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 70); err != nil {
		return err
	}
	return nil
}

func (v Number) Validate() error {
	if err := fedwire.ValidateFractionDigits(fmt.Sprintf("%v", v), 0); err != nil {
		return err
	}
	if err := fedwire.ValidateTotalDigits(fmt.Sprintf("%v", v), 18); err != nil {
		return err
	}
	return nil
}

func (v PaymentMethod7Code1) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "TRF"); err != nil {
		return err
	}
	return nil
}

func (v PercentageRate) Validate() error {
	if err := fedwire.ValidateFractionDigits(fmt.Sprintf("%v", v), 10); err != nil {
		return err
	}
	if err := fedwire.ValidateTotalDigits(fmt.Sprintf("%v", v), 11); err != nil {
		return err
	}
	return nil
}

func (v Priority2Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "HIGH", "NORM"); err != nil {
		return err
	}
	return nil
}

func (v RemittanceLocationMethod2Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "FAXI", "EDIC", "URID", "EMAL", "POST", "SMSM"); err != nil {
		return err
	}
	return nil
}

func (v RoutingNumberFRS1) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[0-9]{9,9}`); err != nil {
		return err
	}
	if err := fedwire.ValidateLength(string(v), 9); err != nil {
		return err
	}
	return nil
}

func (v TaxRecordPeriod1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "MM01", "MM02", "MM03", "MM04", "MM05", "MM06", "MM07", "MM08", "MM09", "MM10", "MM11", "MM12", "QTR1", "QTR2", "QTR3", "QTR4", "HLF1", "HLF2"); err != nil {
		return err
	}
	return nil
}

func (v TrueFalseIndicator) Validate() error {
	return nil
}

func (v UUIDv4Identifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}`); err != nil {
		return err
	}
	return nil
}
