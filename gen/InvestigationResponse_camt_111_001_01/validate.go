// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:camt.111.001.01
package InvestigationResponse_camt_111_001_01

import (
	"github.com/moov-io/base"
	"github.com/moov-io/fedwire20022/pkg/fedwire"
)

// XSD Element validations

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	fedwire.AddError(&errs, baseName+".InvstgtnRspn", v.InvstgtnRspn.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD ComplexType validations

func (v BranchAndFinancialInstitutionIdentification61) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification61"
	fedwire.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemIdentification2Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemIdentification2Choice1"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification21) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification21"
	fedwire.AddError(&errs, baseName+".ClrSysId", v.ClrSysId.Validate())
	fedwire.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification181) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification181"
	fedwire.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v InvestigationData21) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "InvestigationData21"
	fedwire.AddError(&errs, baseName+".RspnData", v.RspnData.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v InvestigationDataRecord1Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "InvestigationDataRecord1Choice1"
	if v.RspnNrrtv != nil {
		fedwire.AddError(&errs, baseName+".RspnNrrtv", v.RspnNrrtv.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v InvestigationRequest31) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "InvestigationRequest31"
	fedwire.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	if v.RqstrInvstgtnId != nil {
		fedwire.AddError(&errs, baseName+".RqstrInvstgtnId", v.RqstrInvstgtnId.Validate())
	}
	if v.RspndrInvstgtnId != nil {
		fedwire.AddError(&errs, baseName+".RspndrInvstgtnId", v.RspndrInvstgtnId.Validate())
	}
	fedwire.AddError(&errs, baseName+".InvstgtnTp", v.InvstgtnTp.Validate())
	if v.InvstgtnSubTp != nil {
		fedwire.AddError(&errs, baseName+".InvstgtnSubTp", v.InvstgtnSubTp.Validate())
	}
	fedwire.AddError(&errs, baseName+".Rqstr", v.Rqstr.Validate())
	fedwire.AddError(&errs, baseName+".Rspndr", v.Rspndr.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v InvestigationResponse31) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "InvestigationResponse31"
	fedwire.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	if v.RspndrInvstgtnId != nil {
		fedwire.AddError(&errs, baseName+".RspndrInvstgtnId", v.RspndrInvstgtnId.Validate())
	}
	fedwire.AddError(&errs, baseName+".InvstgtnSts", v.InvstgtnSts.Validate())
	if v.InvstgtnData != nil {
		for indx := range v.InvstgtnData {
			fedwire.AddError(&errs, baseName+".InvstgtnData", v.InvstgtnData[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v InvestigationResponseV01) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "InvestigationResponseV01"
	fedwire.AddError(&errs, baseName+".InvstgtnRspn", v.InvstgtnRspn.Validate())
	fedwire.AddError(&errs, baseName+".OrgnlInvstgtnReq", v.OrgnlInvstgtnReq.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v InvestigationStatus21) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "InvestigationStatus21"
	fedwire.AddError(&errs, baseName+".Sts", v.Sts.Validate())
	if v.StsRsn != nil {
		fedwire.AddError(&errs, baseName+".StsRsn", v.StsRsn.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v InvestigationStatusReason1Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "InvestigationStatusReason1Choice1"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v InvestigationSubType1Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "InvestigationSubType1Choice1"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v InvestigationType1Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "InvestigationType1Choice1"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party40Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Party40Choice1"
	if v.Agt != nil {
		fedwire.AddError(&errs, baseName+".Agt", v.Agt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v ExternalClearingSystemIdentification1CodeFixed) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "USABA"); err != nil {
		return err
	}
	return nil
}

func (v ExternalInvestigationStatus1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalInvestigationStatusReason1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalInvestigationSubType1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalInvestigationType1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v IMADFedwireFunds1) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[0-9]{8}[A-Z0-9]{8}[0-9]{6}`); err != nil {
		return err
	}
	if err := fedwire.ValidateMinLength(string(v), 22); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 22); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max500Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 500); err != nil {
		return err
	}
	return nil
}

func (v RoutingNumberFRS1) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[0-9]{9,9}`); err != nil {
		return err
	}
	if err := fedwire.ValidateLength(string(v), 9); err != nil {
		return err
	}
	return nil
}
