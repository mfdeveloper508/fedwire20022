// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:admi.004.001.02
package FedwireFundsBroadcast_admi_004_001_02

import (
	"github.com/moov-io/base"
	"github.com/moov-io/fedwire20022/pkg/fedwire"
)

// XSD Element validations

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	fedwire.AddError(&errs, baseName+".SysEvtNtfctn", v.SysEvtNtfctn.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD ComplexType validations

func (v Event21) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Event21"
	fedwire.AddError(&errs, baseName+".EvtCd", v.EvtCd.Validate())
	fedwire.AddError(&errs, baseName+".EvtParam", v.EvtParam.Validate())
	if v.EvtDesc != nil {
		fedwire.AddError(&errs, baseName+".EvtDesc", v.EvtDesc.Validate())
	}
	fedwire.AddError(&errs, baseName+".EvtTm", v.EvtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SystemEventNotificationV02) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SystemEventNotificationV02"
	fedwire.AddError(&errs, baseName+".EvtInf", v.EvtInf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v EventFedwireFunds1) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "OPEN", "CLSD", "EXTN", "ADHC"); err != nil {
		return err
	}
	return nil
}

func (v Max1000Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 1000); err != nil {
		return err
	}
	return nil
}
