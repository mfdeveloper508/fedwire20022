// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:admi.011.001.01
package FedwireFundsSystemResponse_admi_011_001_01

import (
	"github.com/moov-io/base"
	"github.com/moov-io/fedwire20022/pkg/fedwire"
)

// XSD Element validations

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	fedwire.AddError(&errs, baseName+".SysEvtAck", v.SysEvtAck.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD ComplexType validations

func (v Event11) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Event11"
	fedwire.AddError(&errs, baseName+".EvtCd", v.EvtCd.Validate())
	fedwire.AddError(&errs, baseName+".EvtParam", v.EvtParam.Validate())
	fedwire.AddError(&errs, baseName+".EvtTm", v.EvtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SystemEventAcknowledgementV01) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SystemEventAcknowledgementV01"
	fedwire.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	fedwire.AddError(&errs, baseName+".AckDtls", v.AckDtls.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v EndpointIdentifierFedwireFunds1) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z0-9]{8,8}`); err != nil {
		return err
	}
	if err := fedwire.ValidateMinLength(string(v), 8); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 8); err != nil {
		return err
	}
	return nil
}

func (v EventFedwireFunds1) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "PING"); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}
