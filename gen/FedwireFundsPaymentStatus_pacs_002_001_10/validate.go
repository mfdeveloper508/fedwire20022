// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10
package FedwireFundsPaymentStatus_pacs_002_001_10

import (
	"github.com/moov-io/base"
	"github.com/moov-io/fedwire20022/pkg/fedwire"
)

// XSD Element validations

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	fedwire.AddError(&errs, baseName+".FIToFIPmtStsRpt", v.FIToFIPmtStsRpt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD ComplexType validations

func (v BranchAndFinancialInstitutionIdentification61) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification61"
	fedwire.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification62) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification62"
	fedwire.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemIdentification2Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemIdentification2Choice1"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification21) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification21"
	fedwire.AddError(&errs, baseName+".ClrSysId", v.ClrSysId.Validate())
	fedwire.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification22) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification22"
	fedwire.AddError(&errs, baseName+".ClrSysId", v.ClrSysId.Validate())
	fedwire.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DateAndDateTime2Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DateAndDateTime2Choice1"
	if v.Dt != nil {
		fedwire.AddError(&errs, baseName+".Dt", v.Dt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FIToFIPaymentStatusReportV10) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FIToFIPaymentStatusReportV10"
	fedwire.AddError(&errs, baseName+".GrpHdr", v.GrpHdr.Validate())
	fedwire.AddError(&errs, baseName+".TxInfAndSts", v.TxInfAndSts.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification181) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification181"
	fedwire.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification182) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification182"
	fedwire.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GroupHeader911) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GroupHeader911"
	fedwire.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	fedwire.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OriginalGroupInformation291) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OriginalGroupInformation291"
	fedwire.AddError(&errs, baseName+".OrgnlMsgId", v.OrgnlMsgId.Validate())
	fedwire.AddError(&errs, baseName+".OrgnlMsgNmId", v.OrgnlMsgNmId.Validate())
	fedwire.AddError(&errs, baseName+".OrgnlCreDtTm", v.OrgnlCreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentTransaction1101) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PaymentTransaction1101"
	fedwire.AddError(&errs, baseName+".OrgnlGrpInf", v.OrgnlGrpInf.Validate())
	fedwire.AddError(&errs, baseName+".OrgnlUETR", v.OrgnlUETR.Validate())
	fedwire.AddError(&errs, baseName+".TxSts", v.TxSts.Validate())
	if v.StsRsnInf != nil {
		for indx := range v.StsRsnInf {
			fedwire.AddError(&errs, baseName+".StsRsnInf", v.StsRsnInf[indx].Validate())
		}
	}
	if v.AccptncDtTm != nil {
		fedwire.AddError(&errs, baseName+".AccptncDtTm", v.AccptncDtTm.Validate())
	}
	if v.FctvIntrBkSttlmDt != nil {
		fedwire.AddError(&errs, baseName+".FctvIntrBkSttlmDt", v.FctvIntrBkSttlmDt.Validate())
	}
	fedwire.AddError(&errs, baseName+".InstgAgt", v.InstgAgt.Validate())
	fedwire.AddError(&errs, baseName+".InstdAgt", v.InstdAgt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v StatusReason6Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "StatusReason6Choice1"
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v StatusReasonInformation121) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "StatusReasonInformation121"
	fedwire.AddError(&errs, baseName+".Rsn", v.Rsn.Validate())
	fedwire.AddError(&errs, baseName+".AddtlInf", v.AddtlInf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v ExternalClearingSystemIdentification1CodeFixed) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "USABA"); err != nil {
		return err
	}
	return nil
}

func (v ExternalPaymentTransactionStatus1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v IMADFedwireFunds1) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[0-9]{8}[A-Z0-9]{8}[0-9]{6}`); err != nil {
		return err
	}
	if err := fedwire.ValidateMinLength(string(v), 22); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 22); err != nil {
		return err
	}
	return nil
}

func (v Max105Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 105); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max35TextFixed) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "021151080"); err != nil {
		return err
	}
	return nil
}

func (v MessageNameIdentificationFRS1) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[a-z]{4,4}[.]{1,1}[0-9]{3,3}[.]{1,1}001[.]{1,1}[0-9]{2,2}`); err != nil {
		return err
	}
	if err := fedwire.ValidateLength(string(v), 15); err != nil {
		return err
	}
	return nil
}

func (v RoutingNumberFRS1) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[0-9]{9,9}`); err != nil {
		return err
	}
	if err := fedwire.ValidateLength(string(v), 9); err != nil {
		return err
	}
	return nil
}

func (v UUIDv4Identifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}`); err != nil {
		return err
	}
	return nil
}
