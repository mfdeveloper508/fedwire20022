// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:pacs.008.001.01
package pacs_008_001_01

import (
	"fmt"

	"github.com/moov-io/base"
	"github.com/moov-io/fedwire20022/pkg/fedwire"
)

// XSD Element validations

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	fedwire.AddError(&errs, baseName+".Pacs00800101", v.Pacs00800101.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD ComplexType validations

func (v AccountIdentification3Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AccountIdentification3Choice"
	if v.IBAN != nil {
		fedwire.AddError(&errs, baseName+".IBAN", v.IBAN.Validate())
	}
	if v.BBAN != nil {
		fedwire.AddError(&errs, baseName+".BBAN", v.BBAN.Validate())
	}
	if v.UPIC != nil {
		fedwire.AddError(&errs, baseName+".UPIC", v.UPIC.Validate())
	}
	if v.PrtryAcct != nil {
		fedwire.AddError(&errs, baseName+".PrtryAcct", v.PrtryAcct.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification3"
	fedwire.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if v.BrnchId != nil {
		fedwire.AddError(&errs, baseName+".BrnchId", v.BrnchId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchData) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchData"
	if v.Id != nil {
		fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	}
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PstlAdr != nil {
		fedwire.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashAccount7) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashAccount7"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Ccy != nil {
		fedwire.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())
	}
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashAccountType2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashAccountType2"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ChargesInformation1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ChargesInformation1"
	fedwire.AddError(&errs, baseName+".ChrgsAmt", v.ChrgsAmt.Validate())
	fedwire.AddError(&errs, baseName+".ChrgsPty", v.ChrgsPty.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemIdentification1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemIdentification1Choice"
	if v.ClrSysId != nil {
		fedwire.AddError(&errs, baseName+".ClrSysId", v.ClrSysId.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification3Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification3Choice"
	if v.Id != nil {
		fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditTransferTransactionInformation2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditTransferTransactionInformation2"
	fedwire.AddError(&errs, baseName+".PmtId", v.PmtId.Validate())
	if v.PmtTpInf != nil {
		fedwire.AddError(&errs, baseName+".PmtTpInf", v.PmtTpInf.Validate())
	}
	fedwire.AddError(&errs, baseName+".IntrBkSttlmAmt", v.IntrBkSttlmAmt.Validate())
	if v.IntrBkSttlmDt != nil {
		fedwire.AddError(&errs, baseName+".IntrBkSttlmDt", v.IntrBkSttlmDt.Validate())
	}
	if v.SttlmTmIndctn != nil {
		fedwire.AddError(&errs, baseName+".SttlmTmIndctn", v.SttlmTmIndctn.Validate())
	}
	if v.SttlmTmReq != nil {
		fedwire.AddError(&errs, baseName+".SttlmTmReq", v.SttlmTmReq.Validate())
	}
	if v.AccptncDtTm != nil {
		fedwire.AddError(&errs, baseName+".AccptncDtTm", v.AccptncDtTm.Validate())
	}
	if v.PoolgAdjstmntDt != nil {
		fedwire.AddError(&errs, baseName+".PoolgAdjstmntDt", v.PoolgAdjstmntDt.Validate())
	}
	if v.InstdAmt != nil {
		fedwire.AddError(&errs, baseName+".InstdAmt", v.InstdAmt.Validate())
	}
	if v.XchgRate != nil {
		fedwire.AddError(&errs, baseName+".XchgRate", v.XchgRate.Validate())
	}
	fedwire.AddError(&errs, baseName+".ChrgBr", v.ChrgBr.Validate())
	if v.ChrgsInf != nil {
		for indx := range v.ChrgsInf {
			fedwire.AddError(&errs, baseName+".ChrgsInf", v.ChrgsInf[indx].Validate())
		}
	}
	if v.PrvsInstgAgt != nil {
		fedwire.AddError(&errs, baseName+".PrvsInstgAgt", v.PrvsInstgAgt.Validate())
	}
	if v.PrvsInstgAgtAcct != nil {
		fedwire.AddError(&errs, baseName+".PrvsInstgAgtAcct", v.PrvsInstgAgtAcct.Validate())
	}
	if v.InstgAgt != nil {
		fedwire.AddError(&errs, baseName+".InstgAgt", v.InstgAgt.Validate())
	}
	if v.InstdAgt != nil {
		fedwire.AddError(&errs, baseName+".InstdAgt", v.InstdAgt.Validate())
	}
	if v.IntrmyAgt1 != nil {
		fedwire.AddError(&errs, baseName+".IntrmyAgt1", v.IntrmyAgt1.Validate())
	}
	if v.IntrmyAgt1Acct != nil {
		fedwire.AddError(&errs, baseName+".IntrmyAgt1Acct", v.IntrmyAgt1Acct.Validate())
	}
	if v.IntrmyAgt2 != nil {
		fedwire.AddError(&errs, baseName+".IntrmyAgt2", v.IntrmyAgt2.Validate())
	}
	if v.IntrmyAgt2Acct != nil {
		fedwire.AddError(&errs, baseName+".IntrmyAgt2Acct", v.IntrmyAgt2Acct.Validate())
	}
	if v.IntrmyAgt3 != nil {
		fedwire.AddError(&errs, baseName+".IntrmyAgt3", v.IntrmyAgt3.Validate())
	}
	if v.IntrmyAgt3Acct != nil {
		fedwire.AddError(&errs, baseName+".IntrmyAgt3Acct", v.IntrmyAgt3Acct.Validate())
	}
	if v.UltmtDbtr != nil {
		fedwire.AddError(&errs, baseName+".UltmtDbtr", v.UltmtDbtr.Validate())
	}
	if v.InitgPty != nil {
		fedwire.AddError(&errs, baseName+".InitgPty", v.InitgPty.Validate())
	}
	fedwire.AddError(&errs, baseName+".Dbtr", v.Dbtr.Validate())
	if v.DbtrAcct != nil {
		fedwire.AddError(&errs, baseName+".DbtrAcct", v.DbtrAcct.Validate())
	}
	fedwire.AddError(&errs, baseName+".DbtrAgt", v.DbtrAgt.Validate())
	if v.DbtrAgtAcct != nil {
		fedwire.AddError(&errs, baseName+".DbtrAgtAcct", v.DbtrAgtAcct.Validate())
	}
	fedwire.AddError(&errs, baseName+".CdtrAgt", v.CdtrAgt.Validate())
	if v.CdtrAgtAcct != nil {
		fedwire.AddError(&errs, baseName+".CdtrAgtAcct", v.CdtrAgtAcct.Validate())
	}
	fedwire.AddError(&errs, baseName+".Cdtr", v.Cdtr.Validate())
	if v.CdtrAcct != nil {
		fedwire.AddError(&errs, baseName+".CdtrAcct", v.CdtrAcct.Validate())
	}
	if v.UltmtCdtr != nil {
		fedwire.AddError(&errs, baseName+".UltmtCdtr", v.UltmtCdtr.Validate())
	}
	if v.InstrForCdtrAgt != nil {
		for indx := range v.InstrForCdtrAgt {
			fedwire.AddError(&errs, baseName+".InstrForCdtrAgt", v.InstrForCdtrAgt[indx].Validate())
		}
	}
	if v.InstrForNxtAgt != nil {
		for indx := range v.InstrForNxtAgt {
			fedwire.AddError(&errs, baseName+".InstrForNxtAgt", v.InstrForNxtAgt[indx].Validate())
		}
	}
	if v.Purp != nil {
		fedwire.AddError(&errs, baseName+".Purp", v.Purp.Validate())
	}
	if v.RgltryRptg != nil {
		for indx := range v.RgltryRptg {
			fedwire.AddError(&errs, baseName+".RgltryRptg", v.RgltryRptg[indx].Validate())
		}
	}
	if v.RltdRmtInf != nil {
		for indx := range v.RltdRmtInf {
			fedwire.AddError(&errs, baseName+".RltdRmtInf", v.RltdRmtInf[indx].Validate())
		}
	}
	if v.RmtInf != nil {
		fedwire.AddError(&errs, baseName+".RmtInf", v.RmtInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditorReferenceInformation1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditorReferenceInformation1"
	if v.CdtrRefTp != nil {
		fedwire.AddError(&errs, baseName+".CdtrRefTp", v.CdtrRefTp.Validate())
	}
	if v.CdtrRef != nil {
		fedwire.AddError(&errs, baseName+".CdtrRef", v.CdtrRef.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditorReferenceType1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditorReferenceType1"
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CurrencyAndAmount) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CurrencyAndAmount"

	fedwire.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())

	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DateAndPlaceOfBirth) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DateAndPlaceOfBirth"
	fedwire.AddError(&errs, baseName+".BirthDt", v.BirthDt.Validate())
	if v.PrvcOfBirth != nil {
		fedwire.AddError(&errs, baseName+".PrvcOfBirth", v.PrvcOfBirth.Validate())
	}
	fedwire.AddError(&errs, baseName+".CityOfBirth", v.CityOfBirth.Validate())
	fedwire.AddError(&errs, baseName+".CtryOfBirth", v.CtryOfBirth.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification3"
	if v.BIC != nil {
		fedwire.AddError(&errs, baseName+".BIC", v.BIC.Validate())
	}
	if v.ClrSysMmbId != nil {
		fedwire.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	}
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PstlAdr != nil {
		fedwire.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	}
	if v.PrtryId != nil {
		fedwire.AddError(&errs, baseName+".PrtryId", v.PrtryId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification5Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification5Choice"
	if v.BIC != nil {
		fedwire.AddError(&errs, baseName+".BIC", v.BIC.Validate())
	}
	if v.ClrSysMmbId != nil {
		fedwire.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	}
	if v.NmAndAdr != nil {
		fedwire.AddError(&errs, baseName+".NmAndAdr", v.NmAndAdr.Validate())
	}
	if v.PrtryId != nil {
		fedwire.AddError(&errs, baseName+".PrtryId", v.PrtryId.Validate())
	}
	if v.CmbndId != nil {
		fedwire.AddError(&errs, baseName+".CmbndId", v.CmbndId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericIdentification3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericIdentification3"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericIdentification4) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericIdentification4"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	fedwire.AddError(&errs, baseName+".IdTp", v.IdTp.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GroupHeader2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GroupHeader2"
	fedwire.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	fedwire.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	if v.BtchBookg != nil {
		fedwire.AddError(&errs, baseName+".BtchBookg", v.BtchBookg.Validate())
	}
	fedwire.AddError(&errs, baseName+".NbOfTxs", v.NbOfTxs.Validate())
	if v.CtrlSum != nil {
		fedwire.AddError(&errs, baseName+".CtrlSum", v.CtrlSum.Validate())
	}
	if v.TtlIntrBkSttlmAmt != nil {
		fedwire.AddError(&errs, baseName+".TtlIntrBkSttlmAmt", v.TtlIntrBkSttlmAmt.Validate())
	}
	if v.IntrBkSttlmDt != nil {
		fedwire.AddError(&errs, baseName+".IntrBkSttlmDt", v.IntrBkSttlmDt.Validate())
	}
	fedwire.AddError(&errs, baseName+".SttlmInf", v.SttlmInf.Validate())
	if v.PmtTpInf != nil {
		fedwire.AddError(&errs, baseName+".PmtTpInf", v.PmtTpInf.Validate())
	}
	if v.InstgAgt != nil {
		fedwire.AddError(&errs, baseName+".InstgAgt", v.InstgAgt.Validate())
	}
	if v.InstdAgt != nil {
		fedwire.AddError(&errs, baseName+".InstdAgt", v.InstdAgt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v InstructionForCreditorAgent1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "InstructionForCreditorAgent1"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.InstrInf != nil {
		fedwire.AddError(&errs, baseName+".InstrInf", v.InstrInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v InstructionForNextAgent1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "InstructionForNextAgent1"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.InstrInf != nil {
		fedwire.AddError(&errs, baseName+".InstrInf", v.InstrInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v LocalInstrument1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "LocalInstrument1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v NameAndAddress3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "NameAndAddress3"
	fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	fedwire.AddError(&errs, baseName+".Adr", v.Adr.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v NameAndAddress7) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "NameAndAddress7"
	fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	fedwire.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OrganisationIdentification2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OrganisationIdentification2"
	if v.BIC != nil {
		fedwire.AddError(&errs, baseName+".BIC", v.BIC.Validate())
	}
	if v.IBEI != nil {
		fedwire.AddError(&errs, baseName+".IBEI", v.IBEI.Validate())
	}
	if v.BEI != nil {
		fedwire.AddError(&errs, baseName+".BEI", v.BEI.Validate())
	}
	if v.EANGLN != nil {
		fedwire.AddError(&errs, baseName+".EANGLN", v.EANGLN.Validate())
	}
	if v.USCHU != nil {
		fedwire.AddError(&errs, baseName+".USCHU", v.USCHU.Validate())
	}
	if v.DUNS != nil {
		fedwire.AddError(&errs, baseName+".DUNS", v.DUNS.Validate())
	}
	if v.BkPtyId != nil {
		fedwire.AddError(&errs, baseName+".BkPtyId", v.BkPtyId.Validate())
	}
	if v.TaxIdNb != nil {
		fedwire.AddError(&errs, baseName+".TaxIdNb", v.TaxIdNb.Validate())
	}
	if v.PrtryId != nil {
		fedwire.AddError(&errs, baseName+".PrtryId", v.PrtryId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party2Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Party2Choice"
	if v.OrgId != nil {
		fedwire.AddError(&errs, baseName+".OrgId", v.OrgId.Validate())
	}
	for indx := range v.PrvtId {
		fedwire.AddError(&errs, baseName+".PrvtId", v.PrvtId[indx].Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PartyIdentification8) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PartyIdentification8"
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PstlAdr != nil {
		fedwire.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	}
	if v.Id != nil {
		fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	}
	if v.CtryOfRes != nil {
		fedwire.AddError(&errs, baseName+".CtryOfRes", v.CtryOfRes.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentIdentification2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PaymentIdentification2"
	if v.InstrId != nil {
		fedwire.AddError(&errs, baseName+".InstrId", v.InstrId.Validate())
	}
	fedwire.AddError(&errs, baseName+".EndToEndId", v.EndToEndId.Validate())
	fedwire.AddError(&errs, baseName+".TxId", v.TxId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentTypeInformation3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PaymentTypeInformation3"
	if v.InstrPrty != nil {
		fedwire.AddError(&errs, baseName+".InstrPrty", v.InstrPrty.Validate())
	}
	if v.LclInstrm != nil {
		fedwire.AddError(&errs, baseName+".LclInstrm", v.LclInstrm.Validate())
	}
	if v.CtgyPurp != nil {
		fedwire.AddError(&errs, baseName+".CtgyPurp", v.CtgyPurp.Validate())
	}
	if v.SvcLvl != nil {
		fedwire.AddError(&errs, baseName+".SvcLvl", v.SvcLvl.Validate())
	}
	if v.ClrChanl != nil {
		fedwire.AddError(&errs, baseName+".ClrChanl", v.ClrChanl.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PersonIdentification3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PersonIdentification3"
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if v.DrvrsLicNb != nil {
		fedwire.AddError(&errs, baseName+".DrvrsLicNb", v.DrvrsLicNb.Validate())
	}
	if v.CstmrNb != nil {
		fedwire.AddError(&errs, baseName+".CstmrNb", v.CstmrNb.Validate())
	}
	if v.SclSctyNb != nil {
		fedwire.AddError(&errs, baseName+".SclSctyNb", v.SclSctyNb.Validate())
	}
	if v.AlnRegnNb != nil {
		fedwire.AddError(&errs, baseName+".AlnRegnNb", v.AlnRegnNb.Validate())
	}
	if v.PsptNb != nil {
		fedwire.AddError(&errs, baseName+".PsptNb", v.PsptNb.Validate())
	}
	if v.TaxIdNb != nil {
		fedwire.AddError(&errs, baseName+".TaxIdNb", v.TaxIdNb.Validate())
	}
	if v.IdntyCardNb != nil {
		fedwire.AddError(&errs, baseName+".IdntyCardNb", v.IdntyCardNb.Validate())
	}
	if v.MplyrIdNb != nil {
		fedwire.AddError(&errs, baseName+".MplyrIdNb", v.MplyrIdNb.Validate())
	}
	if v.DtAndPlcOfBirth != nil {
		fedwire.AddError(&errs, baseName+".DtAndPlcOfBirth", v.DtAndPlcOfBirth.Validate())
	}
	if v.OthrId != nil {
		fedwire.AddError(&errs, baseName+".OthrId", v.OthrId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PostalAddress1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PostalAddress1"
	if v.AdrTp != nil {
		fedwire.AddError(&errs, baseName+".AdrTp", v.AdrTp.Validate())
	}
	if v.AdrLine != nil {
		for indx := range v.AdrLine {
			fedwire.AddError(&errs, baseName+".AdrLine", v.AdrLine[indx].Validate())
		}
	}
	if v.StrtNm != nil {
		fedwire.AddError(&errs, baseName+".StrtNm", v.StrtNm.Validate())
	}
	if v.BldgNb != nil {
		fedwire.AddError(&errs, baseName+".BldgNb", v.BldgNb.Validate())
	}
	if v.PstCd != nil {
		fedwire.AddError(&errs, baseName+".PstCd", v.PstCd.Validate())
	}
	if v.TwnNm != nil {
		fedwire.AddError(&errs, baseName+".TwnNm", v.TwnNm.Validate())
	}
	if v.CtrySubDvsn != nil {
		fedwire.AddError(&errs, baseName+".CtrySubDvsn", v.CtrySubDvsn.Validate())
	}
	fedwire.AddError(&errs, baseName+".Ctry", v.Ctry.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Purpose1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Purpose1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReferredDocumentAmount1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReferredDocumentAmount1Choice"
	if v.DuePyblAmt != nil {
		fedwire.AddError(&errs, baseName+".DuePyblAmt", v.DuePyblAmt.Validate())
	}
	if v.DscntApldAmt != nil {
		fedwire.AddError(&errs, baseName+".DscntApldAmt", v.DscntApldAmt.Validate())
	}
	if v.RmtdAmt != nil {
		fedwire.AddError(&errs, baseName+".RmtdAmt", v.RmtdAmt.Validate())
	}
	if v.CdtNoteAmt != nil {
		fedwire.AddError(&errs, baseName+".CdtNoteAmt", v.CdtNoteAmt.Validate())
	}
	if v.TaxAmt != nil {
		fedwire.AddError(&errs, baseName+".TaxAmt", v.TaxAmt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReferredDocumentInformation1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReferredDocumentInformation1"
	if v.RfrdDocTp != nil {
		fedwire.AddError(&errs, baseName+".RfrdDocTp", v.RfrdDocTp.Validate())
	}
	if v.RfrdDocNb != nil {
		fedwire.AddError(&errs, baseName+".RfrdDocNb", v.RfrdDocNb.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReferredDocumentType1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReferredDocumentType1"
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RegulatoryAuthority) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RegulatoryAuthority"
	if v.AuthrtyNm != nil {
		fedwire.AddError(&errs, baseName+".AuthrtyNm", v.AuthrtyNm.Validate())
	}
	if v.AuthrtyCtry != nil {
		fedwire.AddError(&errs, baseName+".AuthrtyCtry", v.AuthrtyCtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RegulatoryReporting2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RegulatoryReporting2"
	if v.DbtCdtRptgInd != nil {
		fedwire.AddError(&errs, baseName+".DbtCdtRptgInd", v.DbtCdtRptgInd.Validate())
	}
	if v.Authrty != nil {
		fedwire.AddError(&errs, baseName+".Authrty", v.Authrty.Validate())
	}
	if v.RgltryDtls != nil {
		fedwire.AddError(&errs, baseName+".RgltryDtls", v.RgltryDtls.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceInformation1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceInformation1"
	if v.Ustrd != nil {
		for indx := range v.Ustrd {
			fedwire.AddError(&errs, baseName+".Ustrd", v.Ustrd[indx].Validate())
		}
	}
	if v.Strd != nil {
		for indx := range v.Strd {
			fedwire.AddError(&errs, baseName+".Strd", v.Strd[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceLocation1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceLocation1"
	if v.RmtId != nil {
		fedwire.AddError(&errs, baseName+".RmtId", v.RmtId.Validate())
	}
	if v.RmtLctnMtd != nil {
		fedwire.AddError(&errs, baseName+".RmtLctnMtd", v.RmtLctnMtd.Validate())
	}
	if v.RmtLctnElctrncAdr != nil {
		fedwire.AddError(&errs, baseName+".RmtLctnElctrncAdr", v.RmtLctnElctrncAdr.Validate())
	}
	if v.RmtLctnPstlAdr != nil {
		fedwire.AddError(&errs, baseName+".RmtLctnPstlAdr", v.RmtLctnPstlAdr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ServiceLevel2Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ServiceLevel2Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SettlementDateTimeIndication1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SettlementDateTimeIndication1"
	if v.DbtDtTm != nil {
		fedwire.AddError(&errs, baseName+".DbtDtTm", v.DbtDtTm.Validate())
	}
	if v.CdtDtTm != nil {
		fedwire.AddError(&errs, baseName+".CdtDtTm", v.CdtDtTm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SettlementInformation1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SettlementInformation1"
	fedwire.AddError(&errs, baseName+".SttlmMtd", v.SttlmMtd.Validate())
	if v.SttlmAcct != nil {
		fedwire.AddError(&errs, baseName+".SttlmAcct", v.SttlmAcct.Validate())
	}
	if v.ClrSys != nil {
		fedwire.AddError(&errs, baseName+".ClrSys", v.ClrSys.Validate())
	}
	if v.InstgRmbrsmntAgt != nil {
		fedwire.AddError(&errs, baseName+".InstgRmbrsmntAgt", v.InstgRmbrsmntAgt.Validate())
	}
	if v.InstgRmbrsmntAgtAcct != nil {
		fedwire.AddError(&errs, baseName+".InstgRmbrsmntAgtAcct", v.InstgRmbrsmntAgtAcct.Validate())
	}
	if v.InstdRmbrsmntAgt != nil {
		fedwire.AddError(&errs, baseName+".InstdRmbrsmntAgt", v.InstdRmbrsmntAgt.Validate())
	}
	if v.InstdRmbrsmntAgtAcct != nil {
		fedwire.AddError(&errs, baseName+".InstdRmbrsmntAgtAcct", v.InstdRmbrsmntAgtAcct.Validate())
	}
	if v.ThrdRmbrsmntAgt != nil {
		fedwire.AddError(&errs, baseName+".ThrdRmbrsmntAgt", v.ThrdRmbrsmntAgt.Validate())
	}
	if v.ThrdRmbrsmntAgtAcct != nil {
		fedwire.AddError(&errs, baseName+".ThrdRmbrsmntAgtAcct", v.ThrdRmbrsmntAgtAcct.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SettlementTimeRequest1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SettlementTimeRequest1"
	fedwire.AddError(&errs, baseName+".CLSTm", v.CLSTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SimpleIdentificationInformation2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SimpleIdentificationInformation2"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v StructuredRegulatoryReporting2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "StructuredRegulatoryReporting2"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Amt != nil {
		fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	}
	if v.Inf != nil {
		fedwire.AddError(&errs, baseName+".Inf", v.Inf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v StructuredRemittanceInformation6) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "StructuredRemittanceInformation6"
	if v.RfrdDocInf != nil {
		fedwire.AddError(&errs, baseName+".RfrdDocInf", v.RfrdDocInf.Validate())
	}
	if v.RfrdDocRltdDt != nil {
		fedwire.AddError(&errs, baseName+".RfrdDocRltdDt", v.RfrdDocRltdDt.Validate())
	}
	if v.RfrdDocAmt != nil {
		for indx := range v.RfrdDocAmt {
			fedwire.AddError(&errs, baseName+".RfrdDocAmt", v.RfrdDocAmt[indx].Validate())
		}
	}
	if v.CdtrRefInf != nil {
		fedwire.AddError(&errs, baseName+".CdtrRefInf", v.CdtrRefInf.Validate())
	}
	if v.Invcr != nil {
		fedwire.AddError(&errs, baseName+".Invcr", v.Invcr.Validate())
	}
	if v.Invcee != nil {
		fedwire.AddError(&errs, baseName+".Invcee", v.Invcee.Validate())
	}
	if v.AddtlRmtInf != nil {
		fedwire.AddError(&errs, baseName+".AddtlRmtInf", v.AddtlRmtInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Pacs00800101) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Pacs00800101"
	fedwire.AddError(&errs, baseName+".GrpHdr", v.GrpHdr.Validate())
	for indx := range v.CdtTrfTxInf {
		fedwire.AddError(&errs, baseName+".CdtTrfTxInf", v.CdtTrfTxInf[indx].Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v AddressType2Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "ADDR", "PBOX", "HOME", "BIZZ", "MLTO", "DLVY"); err != nil {
		return err
	}
	return nil
}

func (v BBANIdentifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[a-zA-Z0-9]{1,30}`); err != nil {
		return err
	}
	return nil
}

func (v BEIIdentifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}`); err != nil {
		return err
	}
	return nil
}

func (v BICIdentifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}`); err != nil {
		return err
	}
	return nil
}

func (v BaseOneRate) Validate() error {
	if err := fedwire.ValidateFractionDigits(fmt.Sprintf("%v", v), 10); err != nil {
		return err
	}
	if err := fedwire.ValidateTotalDigits(fmt.Sprintf("%v", v), 11); err != nil {
		return err
	}
	return nil
}

func (v BatchBookingIndicator) Validate() error {
	return nil
}

func (v CHIPSUniversalIdentifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `CH[0-9]{6,6}`); err != nil {
		return err
	}
	return nil
}

func (v CashAccountType4Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "CASH", "CHAR", "COMM", "TAXE", "CISH", "TRAS", "SACC", "CACC", "SVGS", "ONDP", "MGLD", "NREX", "MOMA", "LOAN", "SLRY", "ODFT"); err != nil {
		return err
	}
	return nil
}

func (v CashClearingSystem3Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "ABE", "ART", "AVP", "AZM", "BAP", "BEL", "BOF", "BRL", "CAD", "CAM", "CBJ", "CHP", "DKC", "RTP", "EBA", "ELS", "ERP", "XCT", "HRK", "HRM", "HUF", "LGS", "LVL", "MUP", "NOC", "PCH", "PDS", "PEG", "PNS", "PVE", "SEC", "SIT", "SLB", "SPG", "SSK", "TBF", "TGT", "TOP", "FDW", "BOJ", "FEY", "ZEN", "DDK", "AIP", "BCC", "BDS", "BGN", "BHS", "BIS", "BSP", "EPM", "EPN", "FDA", "GIS", "INC", "JOD", "KPS", "LKB", "MEP", "MRS", "NAM", "PTR", "ROL", "ROS", "SCP", "STG", "THB", "TIS", "TTD", "UIS", "MOS", "ZET", "ZIS", "CHI", "COP"); err != nil {
		return err
	}
	return nil
}

func (v ChargeBearerType1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "DEBT", "CRED", "SHAR", "SLEV"); err != nil {
		return err
	}
	return nil
}

func (v ClearingChannel2Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "RTGS", "RTNS", "MPNS", "BOOK"); err != nil {
		return err
	}
	return nil
}

func (v CountryCode) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{2,2}`); err != nil {
		return err
	}
	return nil
}

func (v CurrencyAndAmountSimpleType) Validate() error {
	if err := fedwire.ValidateMinInclusive(float64(v), 0); err != nil {
		return err
	}
	if err := fedwire.ValidateFractionDigits(fmt.Sprintf("%v", v), 5); err != nil {
		return err
	}
	if err := fedwire.ValidateTotalDigits(fmt.Sprintf("%v", v), 18); err != nil {
		return err
	}
	return nil
}

func (v CurrencyCode) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{3,3}`); err != nil {
		return err
	}
	return nil
}

func (v DecimalNumber) Validate() error {
	if err := fedwire.ValidateFractionDigits(fmt.Sprintf("%v", v), 17); err != nil {
		return err
	}
	if err := fedwire.ValidateTotalDigits(fmt.Sprintf("%v", v), 18); err != nil {
		return err
	}
	return nil
}

func (v DocumentType2Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "MSIN", "CNFA", "DNFA", "CINV", "CREN", "DEBN", "HIRI", "SBIN", "CMCN", "SOAC", "DISP"); err != nil {
		return err
	}
	return nil
}

func (v DocumentType3Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "RADM", "RPIN", "FXDR", "DISP", "PUOR", "SCOR"); err != nil {
		return err
	}
	return nil
}

func (v DunsIdentifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[0-9]{9,9}`); err != nil {
		return err
	}
	return nil
}

func (v EANGLNIdentifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[0-9]{13,13}`); err != nil {
		return err
	}
	return nil
}

func (v ExternalClearingSystemMemberCode) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v ExternalLocalInstrumentCode) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v ExternalPurposeCode) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v IBANIdentifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[a-zA-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}`); err != nil {
		return err
	}
	return nil
}

func (v IBEIIdentifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{2,2}[B-DF-HJ-NP-TV-XZ0-9]{7,7}[0-9]{1,1}`); err != nil {
		return err
	}
	return nil
}

func (v ISOTime) Validate() error {
	return nil
}

func (v Instruction3Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "CHQB", "HOLD", "PHOB", "TELB"); err != nil {
		return err
	}
	return nil
}

func (v Instruction4Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "PHOA", "TELA"); err != nil {
		return err
	}
	return nil
}

func (v Max140Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 140); err != nil {
		return err
	}
	return nil
}

func (v Max15NumericText) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[0-9]{1,15}`); err != nil {
		return err
	}
	return nil
}

func (v Max16Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 16); err != nil {
		return err
	}
	return nil
}

func (v Max256Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 256); err != nil {
		return err
	}
	return nil
}

func (v Max34Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 34); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max3Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 3); err != nil {
		return err
	}
	return nil
}

func (v Max70Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 70); err != nil {
		return err
	}
	return nil
}

func (v PaymentCategoryPurpose1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "CORT", "SALA", "TREA", "CASH", "DIVI", "GOVT", "INTE", "LOAN", "PENS", "SECU", "SSBE", "SUPP", "TAXS", "TRAD", "VATX", "HEDG", "INTC", "WHLD"); err != nil {
		return err
	}
	return nil
}

func (v Priority2Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "HIGH", "NORM"); err != nil {
		return err
	}
	return nil
}

func (v RegulatoryReportingType1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "CRED", "DEBT", "BOTH"); err != nil {
		return err
	}
	return nil
}

func (v RemittanceLocationMethod1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "FAXI", "EDIC", "URID", "EMAL", "POST"); err != nil {
		return err
	}
	return nil
}

func (v ServiceLevel1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "SEPA", "SDVA", "PRPT"); err != nil {
		return err
	}
	return nil
}

func (v SettlementMethod1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "INDA", "INGA", "COVE", "CLRG"); err != nil {
		return err
	}
	return nil
}

func (v UPICIdentifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[0-9]{8,17}`); err != nil {
		return err
	}
	return nil
}
