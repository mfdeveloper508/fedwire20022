// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:admi.007.001.01
package admi_007_001_01

import (
	"github.com/moov-io/base"
	"github.com/moov-io/fedwire20022/pkg/fedwire"
)

// XSD Element validations

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	fedwire.AddError(&errs, baseName+".RctAck", v.RctAck.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD ComplexType validations

func (v GenericIdentification36) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericIdentification36"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	if v.SchmeNm != nil {
		fedwire.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v MessageHeader10) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "MessageHeader10"
	fedwire.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	if v.CreDtTm != nil {
		fedwire.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	}
	if v.QryNm != nil {
		fedwire.AddError(&errs, baseName+".QryNm", v.QryNm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v MessageReference1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "MessageReference1"
	fedwire.AddError(&errs, baseName+".Ref", v.Ref.Validate())
	if v.MsgNm != nil {
		fedwire.AddError(&errs, baseName+".MsgNm", v.MsgNm.Validate())
	}
	if v.RefIssr != nil {
		fedwire.AddError(&errs, baseName+".RefIssr", v.RefIssr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v NameAndAddress5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "NameAndAddress5"
	fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	if v.Adr != nil {
		fedwire.AddError(&errs, baseName+".Adr", v.Adr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PartyIdentification120Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PartyIdentification120Choice"
	if v.AnyBIC != nil {
		fedwire.AddError(&errs, baseName+".AnyBIC", v.AnyBIC.Validate())
	}
	if v.PrtryId != nil {
		fedwire.AddError(&errs, baseName+".PrtryId", v.PrtryId.Validate())
	}
	if v.NmAndAdr != nil {
		fedwire.AddError(&errs, baseName+".NmAndAdr", v.NmAndAdr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PartyIdentification136) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PartyIdentification136"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.LEI != nil {
		fedwire.AddError(&errs, baseName+".LEI", v.LEI.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PostalAddress1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PostalAddress1"
	if v.AdrTp != nil {
		fedwire.AddError(&errs, baseName+".AdrTp", v.AdrTp.Validate())
	}
	if v.AdrLine != nil {
		for indx := range v.AdrLine {
			fedwire.AddError(&errs, baseName+".AdrLine", v.AdrLine[indx].Validate())
		}
	}
	if v.StrtNm != nil {
		fedwire.AddError(&errs, baseName+".StrtNm", v.StrtNm.Validate())
	}
	if v.BldgNb != nil {
		fedwire.AddError(&errs, baseName+".BldgNb", v.BldgNb.Validate())
	}
	if v.PstCd != nil {
		fedwire.AddError(&errs, baseName+".PstCd", v.PstCd.Validate())
	}
	if v.TwnNm != nil {
		fedwire.AddError(&errs, baseName+".TwnNm", v.TwnNm.Validate())
	}
	if v.CtrySubDvsn != nil {
		fedwire.AddError(&errs, baseName+".CtrySubDvsn", v.CtrySubDvsn.Validate())
	}
	fedwire.AddError(&errs, baseName+".Ctry", v.Ctry.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReceiptAcknowledgementReport2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReceiptAcknowledgementReport2"
	fedwire.AddError(&errs, baseName+".RltdRef", v.RltdRef.Validate())
	fedwire.AddError(&errs, baseName+".ReqHdlg", v.ReqHdlg.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReceiptAcknowledgementV01) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReceiptAcknowledgementV01"
	fedwire.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	for indx := range v.Rpt {
		fedwire.AddError(&errs, baseName+".Rpt", v.Rpt[indx].Validate())
	}
	if v.SplmtryData != nil {
		for indx := range v.SplmtryData {
			fedwire.AddError(&errs, baseName+".SplmtryData", v.SplmtryData[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RequestHandling2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RequestHandling2"
	fedwire.AddError(&errs, baseName+".StsCd", v.StsCd.Validate())
	if v.StsDtTm != nil {
		fedwire.AddError(&errs, baseName+".StsDtTm", v.StsDtTm.Validate())
	}
	if v.Desc != nil {
		fedwire.AddError(&errs, baseName+".Desc", v.Desc.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SupplementaryData1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SupplementaryData1"
	if v.PlcAndNm != nil {
		fedwire.AddError(&errs, baseName+".PlcAndNm", v.PlcAndNm.Validate())
	}
	fedwire.AddError(&errs, baseName+".Envlp", v.Envlp.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SupplementaryDataEnvelope1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v AddressType2Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "ADDR", "PBOX", "HOME", "BIZZ", "MLTO", "DLVY"); err != nil {
		return err
	}
	return nil
}

func (v AnyBICDec2014Identifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}`); err != nil {
		return err
	}
	return nil
}

func (v CountryCode) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{2,2}`); err != nil {
		return err
	}
	return nil
}

func (v LEIIdentifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z0-9]{18,18}[0-9]{2,2}`); err != nil {
		return err
	}
	return nil
}

func (v Max140Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 140); err != nil {
		return err
	}
	return nil
}

func (v Max16Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 16); err != nil {
		return err
	}
	return nil
}

func (v Max350Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 350); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max4AlphaNumericText) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[a-zA-Z0-9]{1,4}`); err != nil {
		return err
	}
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v Max70Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 70); err != nil {
		return err
	}
	return nil
}
